// Generated by CoffeeScript 1.3.3
(function() {
  var M, Method, createResource, modelNameToResourcePath, mongoose, schemaToDescription, _createResource,
    __hasProp = {}.hasOwnProperty;

  mongoose = require('mongoose');

  Method = require('./lib/Method');

  M = {
    get: require('./lib/crud/Get'),
    put: require('./lib/crud/Put'),
    del: require('./lib/crud/Del'),
    list: require('./lib/crud/List'),
    post: require('./lib/crud/Post')
  };

  _createResource = function(app, model, desc, hooks, path, options) {
    var defineModel, defineSelf, itemPath, listPath, method, methods, name, postOptions, putOptions, _results;
    defineModel = function(req, res, next) {
      req.rest = {};
      req.rest.model = model;
      req.rest.currentTime = new Date;
      return next(null);
    };
    listPath = path;
    itemPath = "" + path + "/:_id";
    app.all(path, defineModel);
    app.all(itemPath, defineModel);
    putOptions = {
      upsert: options.upsert,
      mtimeField: options.mtimeField,
      ctimeField: options.ctimeField
    };
    postOptions = {
      mtimeField: options.mtimeField,
      ctimeField: options.ctimeField
    };
    methods = {
      get: new M.get(itemPath),
      put: new M.put(itemPath, null, null, putOptions),
      del: new M.del(itemPath),
      post: new M.post(listPath, null, null, postOptions),
      list: new M.list(listPath)
    };
    _results = [];
    for (name in methods) {
      if (!__hasProp.call(methods, name)) continue;
      method = methods[name];
      defineSelf = (function(method) {
        return function(req, res, next) {
          req.rest.method = method;
          return next(null);
        };
      })(method);
      method.hook({
        begin: defineSelf
      });
      if (hooks[name] != null) {
        method.hook(hooks[name]);
      }
      _results.push(method.addToExpress(app));
    }
    return _results;
  };

  schemaToDescription = function(schema) {
    var desc;
    desc = [];
    schema.eachPath(function(name, type) {
      if (name !== '_id') {
        return desc.push({
          name: name,
          access: 'write'
        });
      }
    });
    return desc;
  };

  modelNameToResourcePath = function(modelName) {
    return '/' + modelName.toLowerCase();
  };

  createResource = function(app, options) {
    var desc, hooks, model, otherOptions, path;
    model = options.model;
    if (!model) {
      throw 'No model';
    }
    desc = schemaToDescription(model.schema);
    path = options.path || modelNameToResourcePath(model.modelName);
    hooks = options.hooks || {};
    otherOptions = {
      upsert: options.upsert,
      mtimeField: options.mtimeField,
      ctimeField: options.ctimeField
    };
    return _createResource(app, model, desc, hooks, path, otherOptions);
  };

  exports.createResource = createResource;

  exports.Method = Method;

}).call(this);
