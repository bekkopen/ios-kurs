// Generated by CoffeeScript 1.3.3
(function() {
  var Method,
    __hasProp = {}.hasOwnProperty;

  module.exports = Method = (function() {

    function Method(path, method, steps, options) {
      var _ref;
      if (path == null) {
        path = null;
      }
      if (method == null) {
        method = null;
      }
      if (steps == null) {
        steps = null;
      }
      this.options = options != null ? options : {};
      this.method = method != null ? method : this.defaultMethod();
      if ((_ref = this.method) !== 'all' && _ref !== 'get' && _ref !== 'post' && _ref !== 'put' && _ref !== 'del') {
        throw new Error("Undefined method '" + this.method + "'");
      }
      this.path = path != null ? path : this.defaultPath();
      this.steps = steps != null ? steps : this.defaultSteps();
      this.routes = {};
      this.autoAdd();
    }

    Method.prototype.defaultSteps = function() {
      return [];
    };

    Method.prototype.defaultMethod = function() {
      return 'all';
    };

    Method.prototype.defaultPath = function() {
      return '/';
    };

    Method.prototype.routesByStep = function(step) {
      if (this.routes[step]) {
        return this.routes[step];
      }
      return [];
    };

    Method.prototype.autoAdd = function() {
      var step, _i, _len, _ref, _results;
      _ref = this.steps;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        step = _ref[_i];
        if (toString.call(this[step]) === '[object Function]') {
          _results.push(this.add(step, this[step]));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Method.prototype.hook = function(hooks) {
      var callbackFuntion, step, _results;
      _results = [];
      for (step in hooks) {
        if (!__hasProp.call(hooks, step)) continue;
        callbackFuntion = hooks[step];
        _results.push(this.add(step, callbackFuntion));
      }
      return _results;
    };

    Method.prototype.add = function(step, callbackFunction) {
      if (!this.routes[step]) {
        this.routes[step] = [];
      }
      return this.routes[step].push(callbackFunction);
    };

    Method.prototype.addToExpress = function(app) {
      var callback, routes, step, _i, _len, _ref, _results;
      _ref = this.steps;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        step = _ref[_i];
        routes = this.routesByStep(step);
        _results.push((function() {
          var _j, _len1, _results1;
          _results1 = [];
          for (_j = 0, _len1 = routes.length; _j < _len1; _j++) {
            callback = routes[_j];
            _results1.push(app[this.method](this.path, callback));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    return Method;

  })();

}).call(this);
